=head1 NAME

constant::exported - Declaring exportable constants

=head1 SYNOPSIS

  package Example::Constants;
  use constant::exported CONST_NAME1 => $const_value;
  use constant::exported CONST_NAME2 => $const_value;
  use Exporter::Lite;
  
  # is_deeply @EXPORT, ['CONST_NAME1', 'CONST_NAME2'];

=head1 DESCRIPTION

The C<constant::export> pragma allows you to declare constants at
compile-time as well as pushing the constant names into the C<@EXPORT>
array such that exporter modules (e.g. L<Exporter::Lite>) can export
the constants.

=head1 USAGE

  use constant::exported CONST_NAME => CONST_VALUE;

... where I<CONST_NAME> is the name of the constant, which should
follow the UPPER_CASE_WITH_UNDERSCORE_CONVENTION, and I<CONST_VALUE>
is a scalar value represented by the constant function.  This is
equivalent to:

  {
    my $value;
    BEGIN { $value = CONST_VALUE }
    sub CONST_NAME () { $value }
    BEGIN { push @EXPORT, 'CONST_NAME' }
  }

... but more readable and easy to write.

=head1 COMPATIBILITY

The C<constant::export> pragma supports the most basic syntax of the
C<constant> pragma:

  -use constant CONST_NAME => $const_value;
  +use constant::exported CONST_NAME => $const_value;

More complex syntaxes are not supported:

  ## Not supported by |use constant::exported|.
  use constant {CONST1 => $value1, CONST2 => $value2};
  use constant CONST1 => ($item1, $item2, $item3);

The C<constant::export> pragma does not check safety of the constant name:

  use constant BEGIN => 1; # croak
  use constant::export BEGIN => 1; # result is uncertain

=head1 SEE ALSO

C<constant>.

C<Exporter>, C<Exporter::Lite>.

=head1 AUTHOR

Wakaba <w@suika.fam.cx>.

=head1 LICENSE

Copyright 2010 Wakaba <w@suika.fam.cx>.

This library and the library generated by it is free software; you can
redistribute them and/or modify them under the same terms as Perl
itself.

=cut
